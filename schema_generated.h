// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SCHEMA_TESTSCHEMA_H_
#define FLATBUFFERS_GENERATED_SCHEMA_TESTSCHEMA_H_

#include "flatbuffers/flatbuffers.h"

namespace TestSchema {

struct TestStruct;

struct TestStruct FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_NAME = 4,
    VT_ID = 6,
    VT_KEY = 8
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  flatbuffers::String *mutable_name() {
    return GetPointer<flatbuffers::String *>(VT_NAME);
  }
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  bool mutate_id(int32_t _id) {
    return SetField<int32_t>(VT_ID, _id, 0);
  }
  int32_t key() const {
    return GetField<int32_t>(VT_KEY, 0);
  }
  bool mutate_key(int32_t _key) {
    return SetField<int32_t>(VT_KEY, _key, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           VerifyField<int32_t>(verifier, VT_ID) &&
           VerifyField<int32_t>(verifier, VT_KEY) &&
           verifier.EndTable();
  }
};

struct TestStructBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(TestStruct::VT_NAME, name);
  }
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(TestStruct::VT_ID, id, 0);
  }
  void add_key(int32_t key) {
    fbb_.AddElement<int32_t>(TestStruct::VT_KEY, key, 0);
  }
  TestStructBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TestStructBuilder &operator=(const TestStructBuilder &);
  flatbuffers::Offset<TestStruct> Finish() {
    const auto end = fbb_.EndTable(start_, 3);
    auto o = flatbuffers::Offset<TestStruct>(end);
    return o;
  }
};

inline flatbuffers::Offset<TestStruct> CreateTestStruct(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    int32_t id = 0,
    int32_t key = 0) {
  TestStructBuilder builder_(_fbb);
  builder_.add_key(key);
  builder_.add_id(id);
  builder_.add_name(name);
  return builder_.Finish();
}

inline flatbuffers::Offset<TestStruct> CreateTestStructDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    int32_t id = 0,
    int32_t key = 0) {
  return TestSchema::CreateTestStruct(
      _fbb,
      name ? _fbb.CreateString(name) : 0,
      id,
      key);
}

inline const TestSchema::TestStruct *GetTestStruct(const void *buf) {
  return flatbuffers::GetRoot<TestSchema::TestStruct>(buf);
}

inline TestStruct *GetMutableTestStruct(void *buf) {
  return flatbuffers::GetMutableRoot<TestStruct>(buf);
}

inline bool VerifyTestStructBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<TestSchema::TestStruct>(nullptr);
}

inline void FinishTestStructBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<TestSchema::TestStruct> root) {
  fbb.Finish(root);
}

}  // namespace TestSchema

#endif  // FLATBUFFERS_GENERATED_SCHEMA_TESTSCHEMA_H_
