// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_REGISTRATION_SCHEMA_H_
#define FLATBUFFERS_GENERATED_REGISTRATION_SCHEMA_H_

#include "flatbuffers/flatbuffers.h"

namespace Schema {

struct Registration;

struct Registration FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_TYPE = 4,
    VT_LOGIN = 6,
    VT_PASSWORD = 8,
    VT_NAME = 10,
    VT_SURNAME = 12,
    VT_SEX = 14,
    VT_DATE_OF_BIRTH = 16
  };
  int16_t type() const {
    return GetField<int16_t>(VT_TYPE, 0);
  }
  const flatbuffers::String *login() const {
    return GetPointer<const flatbuffers::String *>(VT_LOGIN);
  }
  const flatbuffers::String *password() const {
    return GetPointer<const flatbuffers::String *>(VT_PASSWORD);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::String *surname() const {
    return GetPointer<const flatbuffers::String *>(VT_SURNAME);
  }
  bool sex() const {
    return GetField<uint8_t>(VT_SEX, 0) != 0;
  }
  const flatbuffers::String *date_of_birth() const {
    return GetPointer<const flatbuffers::String *>(VT_DATE_OF_BIRTH);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_TYPE) &&
           VerifyOffset(verifier, VT_LOGIN) &&
           verifier.Verify(login()) &&
           VerifyOffset(verifier, VT_PASSWORD) &&
           verifier.Verify(password()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           VerifyOffset(verifier, VT_SURNAME) &&
           verifier.Verify(surname()) &&
           VerifyField<uint8_t>(verifier, VT_SEX) &&
           VerifyOffset(verifier, VT_DATE_OF_BIRTH) &&
           verifier.Verify(date_of_birth()) &&
           verifier.EndTable();
  }
};

struct RegistrationBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(int16_t type) {
    fbb_.AddElement<int16_t>(Registration::VT_TYPE, type, 0);
  }
  void add_login(flatbuffers::Offset<flatbuffers::String> login) {
    fbb_.AddOffset(Registration::VT_LOGIN, login);
  }
  void add_password(flatbuffers::Offset<flatbuffers::String> password) {
    fbb_.AddOffset(Registration::VT_PASSWORD, password);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Registration::VT_NAME, name);
  }
  void add_surname(flatbuffers::Offset<flatbuffers::String> surname) {
    fbb_.AddOffset(Registration::VT_SURNAME, surname);
  }
  void add_sex(bool sex) {
    fbb_.AddElement<uint8_t>(Registration::VT_SEX, static_cast<uint8_t>(sex), 0);
  }
  void add_date_of_birth(flatbuffers::Offset<flatbuffers::String> date_of_birth) {
    fbb_.AddOffset(Registration::VT_DATE_OF_BIRTH, date_of_birth);
  }
  RegistrationBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  RegistrationBuilder &operator=(const RegistrationBuilder &);
  flatbuffers::Offset<Registration> Finish() {
    const auto end = fbb_.EndTable(start_, 7);
    auto o = flatbuffers::Offset<Registration>(end);
    return o;
  }
};

inline flatbuffers::Offset<Registration> CreateRegistration(
    flatbuffers::FlatBufferBuilder &_fbb,
    int16_t type = 0,
    flatbuffers::Offset<flatbuffers::String> login = 0,
    flatbuffers::Offset<flatbuffers::String> password = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::String> surname = 0,
    bool sex = false,
    flatbuffers::Offset<flatbuffers::String> date_of_birth = 0) {
  RegistrationBuilder builder_(_fbb);
  builder_.add_date_of_birth(date_of_birth);
  builder_.add_surname(surname);
  builder_.add_name(name);
  builder_.add_password(password);
  builder_.add_login(login);
  builder_.add_type(type);
  builder_.add_sex(sex);
  return builder_.Finish();
}

inline flatbuffers::Offset<Registration> CreateRegistrationDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int16_t type = 0,
    const char *login = nullptr,
    const char *password = nullptr,
    const char *name = nullptr,
    const char *surname = nullptr,
    bool sex = false,
    const char *date_of_birth = nullptr) {
  return Schema::CreateRegistration(
      _fbb,
      type,
      login ? _fbb.CreateString(login) : 0,
      password ? _fbb.CreateString(password) : 0,
      name ? _fbb.CreateString(name) : 0,
      surname ? _fbb.CreateString(surname) : 0,
      sex,
      date_of_birth ? _fbb.CreateString(date_of_birth) : 0);
}

inline const Schema::Registration *GetRegistration(const void *buf) {
  return flatbuffers::GetRoot<Schema::Registration>(buf);
}

inline bool VerifyRegistrationBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Schema::Registration>(nullptr);
}

inline void FinishRegistrationBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Schema::Registration> root) {
  fbb.Finish(root);
}

}  // namespace Schema

#endif  // FLATBUFFERS_GENERATED_REGISTRATION_SCHEMA_H_
