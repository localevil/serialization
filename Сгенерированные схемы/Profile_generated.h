// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_PROFILE_SCHEMA_H_
#define FLATBUFFERS_GENERATED_PROFILE_SCHEMA_H_

#include "flatbuffers/flatbuffers.h"

namespace Schema {

struct Profile;

struct Profile FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_TYPE = 4,
    VT_KEY = 6,
    VT_NAME = 8,
    VT_SURNAME = 10,
    VT_SEX = 12,
    VT_DATA_OF_BIRTH = 14
  };
  int16_t type() const {
    return GetField<int16_t>(VT_TYPE, 0);
  }
  const flatbuffers::String *key() const {
    return GetPointer<const flatbuffers::String *>(VT_KEY);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::String *surname() const {
    return GetPointer<const flatbuffers::String *>(VT_SURNAME);
  }
  bool sex() const {
    return GetField<uint8_t>(VT_SEX, 0) != 0;
  }
  const flatbuffers::String *data_of_birth() const {
    return GetPointer<const flatbuffers::String *>(VT_DATA_OF_BIRTH);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_TYPE) &&
           VerifyOffset(verifier, VT_KEY) &&
           verifier.Verify(key()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.Verify(name()) &&
           VerifyOffset(verifier, VT_SURNAME) &&
           verifier.Verify(surname()) &&
           VerifyField<uint8_t>(verifier, VT_SEX) &&
           VerifyOffset(verifier, VT_DATA_OF_BIRTH) &&
           verifier.Verify(data_of_birth()) &&
           verifier.EndTable();
  }
};

struct ProfileBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(int16_t type) {
    fbb_.AddElement<int16_t>(Profile::VT_TYPE, type, 0);
  }
  void add_key(flatbuffers::Offset<flatbuffers::String> key) {
    fbb_.AddOffset(Profile::VT_KEY, key);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Profile::VT_NAME, name);
  }
  void add_surname(flatbuffers::Offset<flatbuffers::String> surname) {
    fbb_.AddOffset(Profile::VT_SURNAME, surname);
  }
  void add_sex(bool sex) {
    fbb_.AddElement<uint8_t>(Profile::VT_SEX, static_cast<uint8_t>(sex), 0);
  }
  void add_data_of_birth(flatbuffers::Offset<flatbuffers::String> data_of_birth) {
    fbb_.AddOffset(Profile::VT_DATA_OF_BIRTH, data_of_birth);
  }
  ProfileBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ProfileBuilder &operator=(const ProfileBuilder &);
  flatbuffers::Offset<Profile> Finish() {
    const auto end = fbb_.EndTable(start_, 6);
    auto o = flatbuffers::Offset<Profile>(end);
    return o;
  }
};

inline flatbuffers::Offset<Profile> CreateProfile(
    flatbuffers::FlatBufferBuilder &_fbb,
    int16_t type = 0,
    flatbuffers::Offset<flatbuffers::String> key = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::String> surname = 0,
    bool sex = false,
    flatbuffers::Offset<flatbuffers::String> data_of_birth = 0) {
  ProfileBuilder builder_(_fbb);
  builder_.add_data_of_birth(data_of_birth);
  builder_.add_surname(surname);
  builder_.add_name(name);
  builder_.add_key(key);
  builder_.add_type(type);
  builder_.add_sex(sex);
  return builder_.Finish();
}

inline flatbuffers::Offset<Profile> CreateProfileDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int16_t type = 0,
    const char *key = nullptr,
    const char *name = nullptr,
    const char *surname = nullptr,
    bool sex = false,
    const char *data_of_birth = nullptr) {
  return Schema::CreateProfile(
      _fbb,
      type,
      key ? _fbb.CreateString(key) : 0,
      name ? _fbb.CreateString(name) : 0,
      surname ? _fbb.CreateString(surname) : 0,
      sex,
      data_of_birth ? _fbb.CreateString(data_of_birth) : 0);
}

inline const Schema::Profile *GetProfile(const void *buf) {
  return flatbuffers::GetRoot<Schema::Profile>(buf);
}

inline bool VerifyProfileBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Schema::Profile>(nullptr);
}

inline void FinishProfileBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Schema::Profile> root) {
  fbb.Finish(root);
}

}  // namespace Schema

#endif  // FLATBUFFERS_GENERATED_PROFILE_SCHEMA_H_
