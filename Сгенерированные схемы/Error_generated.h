// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ERROR_SCHEMA_H_
#define FLATBUFFERS_GENERATED_ERROR_SCHEMA_H_

#include "flatbuffers/flatbuffers.h"

namespace Schema {

struct Error;

struct Error FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_TYPE = 4,
    VT_KEY = 6,
    VT_CODE = 8,
    VT_DESCRIPTION = 10
  };
  int16_t type() const {
    return GetField<int16_t>(VT_TYPE, 0);
  }
  const flatbuffers::String *key() const {
    return GetPointer<const flatbuffers::String *>(VT_KEY);
  }
  int16_t code() const {
    return GetField<int16_t>(VT_CODE, 0);
  }
  const flatbuffers::String *description() const {
    return GetPointer<const flatbuffers::String *>(VT_DESCRIPTION);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int16_t>(verifier, VT_TYPE) &&
           VerifyOffset(verifier, VT_KEY) &&
           verifier.Verify(key()) &&
           VerifyField<int16_t>(verifier, VT_CODE) &&
           VerifyOffset(verifier, VT_DESCRIPTION) &&
           verifier.Verify(description()) &&
           verifier.EndTable();
  }
};

struct ErrorBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(int16_t type) {
    fbb_.AddElement<int16_t>(Error::VT_TYPE, type, 0);
  }
  void add_key(flatbuffers::Offset<flatbuffers::String> key) {
    fbb_.AddOffset(Error::VT_KEY, key);
  }
  void add_code(int16_t code) {
    fbb_.AddElement<int16_t>(Error::VT_CODE, code, 0);
  }
  void add_description(flatbuffers::Offset<flatbuffers::String> description) {
    fbb_.AddOffset(Error::VT_DESCRIPTION, description);
  }
  ErrorBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ErrorBuilder &operator=(const ErrorBuilder &);
  flatbuffers::Offset<Error> Finish() {
    const auto end = fbb_.EndTable(start_, 4);
    auto o = flatbuffers::Offset<Error>(end);
    return o;
  }
};

inline flatbuffers::Offset<Error> CreateError(
    flatbuffers::FlatBufferBuilder &_fbb,
    int16_t type = 0,
    flatbuffers::Offset<flatbuffers::String> key = 0,
    int16_t code = 0,
    flatbuffers::Offset<flatbuffers::String> description = 0) {
  ErrorBuilder builder_(_fbb);
  builder_.add_description(description);
  builder_.add_key(key);
  builder_.add_code(code);
  builder_.add_type(type);
  return builder_.Finish();
}

inline flatbuffers::Offset<Error> CreateErrorDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int16_t type = 0,
    const char *key = nullptr,
    int16_t code = 0,
    const char *description = nullptr) {
  return Schema::CreateError(
      _fbb,
      type,
      key ? _fbb.CreateString(key) : 0,
      code,
      description ? _fbb.CreateString(description) : 0);
}

inline const Schema::Error *GetError(const void *buf) {
  return flatbuffers::GetRoot<Schema::Error>(buf);
}

inline bool VerifyErrorBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Schema::Error>(nullptr);
}

inline void FinishErrorBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<Schema::Error> root) {
  fbb.Finish(root);
}

}  // namespace Schema

#endif  // FLATBUFFERS_GENERATED_ERROR_SCHEMA_H_
